
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export interface Employee {
  id: string;
  employee_number: string;
  name: string;
  phone: string;
  email: string | null;
  address: string | null;
  emergency_contact_name: string | null;
  emergency_contact_phone: string | null;
  hourly_wage: number;
  overtime_rate: number | null;
  hire_date: string;
  status: 'active' | 'inactive' | 'terminated' | 'on_leave';
  department: string | null;
  position: string | null;
  notes: string | null;
  created_at: string;
  updated_at: string;
}

export const useEmployees = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: employees = [], isLoading, error } = useQuery({
    queryKey: ['employees'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('employees')
        .select('*')
        .order('name', { ascending: true });
      
      if (error) throw error;
      return data as Employee[];
    }
  });

  const addEmployeeMutation = useMutation({
    mutationFn: async (employeeData: {
      name: string;
      phone: string;
      email?: string;
      address?: string;
      hourly_wage: number;
      status: 'active' | 'inactive' | 'terminated' | 'on_leave';
      hire_date: string;
      position?: string;
      department?: string;
      accessCode?: string | null;
    }) => {
      console.log('Creating employee with data:', employeeData);
      
      // Prepare notes field with access code if provided
      let notes = '';
      if (employeeData.accessCode) {
        notes = `Portal Access: Enabled\nAccess Code: ${employeeData.accessCode}`;
      }
      
      // Match database schema exactly - employee_number will be auto-generated
      const { data, error } = await supabase
        .from('employees')
        .insert({
          employee_number: '', // Will be auto-generated by trigger
          name: employeeData.name,
          phone: employeeData.phone,
          email: employeeData.email || null,
          address: employeeData.address || null,
          hourly_wage: employeeData.hourly_wage,
          status: employeeData.status,
          hire_date: employeeData.hire_date,
          position: employeeData.position || 'mover',
          department: employeeData.department || 'operations',
          notes: notes || null
        })
        .select()
        .single();
      
      if (error) {
        console.error('Error creating employee:', error);
        throw error;
      }
      
      console.log('Employee created successfully:', data);
      return data;
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['employees'] });
      const hasAccessCode = data.notes && data.notes.includes('Access Code:');
      toast({
        title: "Employee Added Successfully",
        description: hasAccessCode 
          ? `${data.name} has been added with portal access enabled.`
          : `${data.name} has been added to your team.`,
      });
    },
    onError: (error: any) => {
      console.error('Error in addEmployeeMutation:', error);
      toast({
        title: "Error Adding Employee",
        description: error.message || "Failed to add employee. Please try again.",
        variant: "destructive",
      });
    }
  });

  const updateEmployeeMutation = useMutation({
    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Employee> }) => {
      const { data, error } = await supabase
        .from('employees')
        .update(updates)
        .eq('id', id)
        .select()
        .single();
      
      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['employees'] });
      toast({
        title: "Employee Updated",
        description: "Employee information has been updated successfully.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error",
        description: error.message || "Failed to update employee. Please try again.",
        variant: "destructive",
      });
    }
  });

  const deleteEmployeeMutation = useMutation({
    mutationFn: async (id: string) => {
      const { error } = await supabase
        .from('employees')
        .delete()
        .eq('id', id);
      
      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['employees'] });
      toast({
        title: "Employee Removed",
        description: "Employee has been removed from your team.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error",
        description: error.message || "Failed to remove employee. Please try again.",
        variant: "destructive",
      });
    }
  });

  return {
    employees,
    isLoading,
    error,
    addEmployee: addEmployeeMutation.mutate,
    isAddingEmployee: addEmployeeMutation.isPending,
    updateEmployee: updateEmployeeMutation.mutate,
    isUpdatingEmployee: updateEmployeeMutation.isPending,
    deleteEmployee: deleteEmployeeMutation.mutate,
    isDeletingEmployee: deleteEmployeeMutation.isPending
  };
};
