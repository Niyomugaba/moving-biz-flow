import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export interface Employee {
  id: string;
  employee_number: string;
  name: string;
  phone: string;
  email: string | null;
  address: string | null;
  emergency_contact_name: string | null;
  emergency_contact_phone: string | null;
  hourly_wage: number;
  overtime_rate: number | null;
  hire_date: string;
  status: 'active' | 'inactive' | 'terminated' | 'on_leave';
  department: string | null;
  position: string | null;
  notes: string | null;
  created_at: string;
  updated_at: string;
}

export const useEmployees = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: employees = [], isLoading, error } = useQuery({
    queryKey: ['employees'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('employees')
        .select('*')
        .order('name', { ascending: true });
      
      if (error) throw error;
      return data as Employee[];
    }
  });

  const addEmployeeMutation = useMutation({
    mutationFn: async (employeeData: {
      name: string;
      phone: string;
      email: string;
      address?: string;
      hourly_wage: number;
      status: 'active' | 'inactive' | 'terminated' | 'on_leave';
      hire_date: string;
      position?: string;
      department?: string;
    }) => {
      console.log('Creating employee with data:', employeeData);
      
      const { data, error } = await supabase
        .from('employees')
        .insert({
          employee_number: '', // Will be auto-generated by trigger
          name: employeeData.name,
          phone: employeeData.phone,
          email: employeeData.email,
          address: employeeData.address || null,
          hourly_wage: employeeData.hourly_wage,
          status: employeeData.status,
          hire_date: employeeData.hire_date,
          position: employeeData.position || 'mover',
          department: employeeData.department || 'operations',
        })
        .select()
        .single();
      
      if (error) {
        console.error('Error creating employee:', error);
        throw error;
      }
      
      console.log('Employee created successfully:', data);
      return data;
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['employees'] });
      toast({
        title: "Employee Added Successfully",
        description: `${data.name} has been added to your team.`,
      });
    },
    onError: (error: any) => {
      console.error('Error in addEmployeeMutation:', error);
      toast({
        title: "Error Adding Employee",
        description: error.message || "Failed to add employee. Please try again.",
        variant: "destructive",
      });
    }
  });

  const updateEmployeeMutation = useMutation({
    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Employee> }) => {
      const { data, error } = await supabase
        .from('employees')
        .update(updates)
        .eq('id', id)
        .select()
        .single();
      
      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['employees'] });
      toast({
        title: "Employee Updated",
        description: "Employee information has been updated successfully.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error",
        description: error.message || "Failed to update employee. Please try again.",
        variant: "destructive",
      });
    }
  });

  const deleteEmployeeMutation = useMutation({
    mutationFn: async (id: string) => {
      const { error } = await supabase
        .from('employees')
        .delete()
        .eq('id', id);
      
      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['employees'] });
      toast({
        title: "Employee Removed",
        description: "Employee has been removed from your team.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error",
        description: error.message || "Failed to remove employee. Please try again.",
        variant: "destructive",
      });
    }
  });

  const createDummyEmployeesMutation = useMutation({
    mutationFn: async ({ count, hourlyRate, jobId }: { count: number; hourlyRate: number; jobId: string }) => {
      console.log('Creating dummy employees:', { count, hourlyRate, jobId });
      
      const dummyEmployees = [];
      const firstNames = ['Alex', 'Jordan', 'Casey', 'Morgan', 'Taylor', 'Riley', 'Avery', 'Quinn', 'Sage', 'River'];
      
      for (let i = 0; i < count; i++) {
        const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];
        const dummyName = `Dummy ${randomFirstName} ${i + 1}`;
        const dummyPhone = `555-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`;
        
        const employeeData = {
          name: dummyName,
          phone: dummyPhone,
          email: `dummy${i + 1}@temp.com`,
          hourly_wage: hourlyRate,
          status: 'active' as const,
          hire_date: new Date().toISOString().split('T')[0],
          position: 'dummy_worker',
          department: 'temporary',
          notes: `Dummy employee created for job ${jobId}`
        };

        const { data, error } = await supabase
          .from('employees')
          .insert({
            employee_number: '', // Will be auto-generated by trigger
            name: employeeData.name,
            phone: employeeData.phone,
            email: employeeData.email,
            hourly_wage: employeeData.hourly_wage,
            status: employeeData.status,
            hire_date: employeeData.hire_date,
            position: employeeData.position,
            department: employeeData.department,
            notes: employeeData.notes
          })
          .select()
          .single();

        if (error) {
          console.error('Error creating dummy employee:', error);
          throw error;
        }

        dummyEmployees.push(data);
      }

      return dummyEmployees;
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['employees'] });
      toast({
        title: "Dummy Employees Created",
        description: `Created ${data.length} dummy employees for this negotiated job.`,
      });
    },
    onError: (error: any) => {
      console.error('Error creating dummy employees:', error);
      toast({
        title: "Error Creating Dummy Employees",
        description: error.message || "Failed to create dummy employees. Please try again.",
        variant: "destructive",
      });
    }
  });

  return {
    employees,
    isLoading,
    error,
    addEmployee: addEmployeeMutation.mutate,
    isAddingEmployee: addEmployeeMutation.isPending,
    updateEmployee: updateEmployeeMutation.mutate,
    isUpdatingEmployee: updateEmployeeMutation.isPending,
    deleteEmployee: deleteEmployeeMutation.mutate,
    isDeletingEmployee: deleteEmployeeMutation.isPending,
    createDummyEmployees: createDummyEmployeesMutation.mutate,
    isCreatingDummyEmployees: createDummyEmployeesMutation.isPending
  };
};
